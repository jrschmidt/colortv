// Generated by CoffeeScript 1.9.1
var DotSquareHelper, QuadrantSplitter, SquareDotHelper, convert, display, insert, putpx;

QuadrantSplitter = (function() {
  function QuadrantSplitter() {
    this.up = [3, 4, 5, 7, 7, 6, 6, 6, 6, 5, 5, 3, 2];
    this.dn = [1, 2, 4, 4, 5, 5, 5, 5, 6, 6, 4, 3, 2];
  }

  QuadrantSplitter.prototype.ratios = function(hx, hy) {
    var i, len, q, rr, spl;
    spl = this.split(hx, hy);
    rr = [];
    for (i = 0, len = spl.length; i < len; i++) {
      q = spl[i];
      rr.push(Math.floor(q * 1000 / 117) / 1000);
    }
    return rr;
  };

  QuadrantSplitter.prototype.split = function(hx, hy) {
    var btm, cut, dn_trim, i, j, l, o, p, qa, qb, qc, qd, ref, ref1, top, up_trim;
    top = this.up.slice(0);
    btm = this.dn.slice(0);
    if (hy < 6) {
      up_trim = 6 - hy;
    } else {
      up_trim = 0;
    }
    if (hy > 6) {
      dn_trim = hy - 6;
    } else {
      dn_trim = 0;
    }
    if (hy < 6) {
      for (j = i = 0; i <= 12; j = ++i) {
        cut = Math.min(top[j], up_trim);
        top[j] = top[j] - cut;
        btm[j] = btm[j] + cut;
      }
    }
    if (hy > 6) {
      for (j = l = 0; l <= 12; j = ++l) {
        cut = Math.min(btm[j], dn_trim);
        btm[j] = btm[j] - cut;
        top[j] = top[j] + cut;
      }
    }
    qa = 0;
    qb = 0;
    qc = 0;
    qd = 0;
    for (j = o = 0, ref = hx; 0 <= ref ? o <= ref : o >= ref; j = 0 <= ref ? ++o : --o) {
      qa += top[j];
      qc += btm[j];
    }
    for (j = p = ref1 = hx + 1; ref1 <= 12 ? p <= 12 : p >= 12; j = ref1 <= 12 ? ++p : --p) {
      qb += top[j];
      qd += btm[j];
    }
    return [qa, qb, qc, qd];
  };

  return QuadrantSplitter;

})();

DotSquareHelper = (function() {
  function DotSquareHelper() {}

  DotSquareHelper.prototype.find_squares = function(a, b) {
    var sqq;
    sqq = [];
    return sqq;
  };

  return DotSquareHelper;

})();

SquareDotHelper = (function() {
  function SquareDotHelper() {
    var z_green;
    z_green = [
      {
        zmax: 114,
        zcol: 3
      }, {
        zmax: 99,
        zcol: 6
      }, {
        zmax: 84,
        zcol: 9
      }, {
        zmax: 69,
        zcol: 12
      }, {
        zmax: 54,
        zcol: 15
      }, {
        zmax: 39,
        zcol: 18
      }, {
        zmax: 24,
        zcol: 21
      }, {
        zmax: 9,
        zcol: 24
      }, {
        zmax: 111,
        zcol: 30
      }, {
        zmax: 96,
        zcol: 33
      }, {
        zmax: 81,
        zcol: 36
      }, {
        zmax: 66,
        zcol: 39
      }, {
        zmax: 51,
        zcol: 42
      }, {
        zmax: 36,
        zcol: 45
      }, {
        zmax: 21,
        zcol: 48
      }, {
        zmax: 6,
        zcol: 51
      }, {
        zmax: 108,
        zcol: 57
      }, {
        zmax: 93,
        zcol: 60
      }, {
        zmax: 78,
        zcol: 63
      }, {
        zmax: 63,
        zcol: 66
      }, {
        zmax: 48,
        zcol: 69
      }, {
        zmax: 33,
        zcol: 72
      }, {
        zmax: 18,
        zcol: 75
      }, {
        zmax: 3,
        zcol: 78
      }, {
        zmax: 105,
        zcol: 84
      }, {
        zmax: 90,
        zcol: 87
      }, {
        zmax: 75,
        zcol: 90
      }, {
        zmax: 60,
        zcol: 93
      }, {
        zmax: 45,
        zcol: 96
      }, {
        zmax: 30,
        zcol: 99
      }, {
        zmax: 15,
        zcol: 102
      }, {
        zmax: 0,
        zcol: 105
      }, {
        zmax: 102,
        zcol: 111
      }, {
        zmax: 87,
        zcol: 114
      }, {
        zmax: 72,
        zcol: 117
      }, {
        zmax: 57,
        zcol: 120
      }, {
        zmax: 42,
        zcol: 123
      }, {
        zmax: 27,
        zcol: 126
      }, {
        zmax: 12,
        zcol: 129
      }, {
        zmax: 114,
        zcol: 135
      }, {
        zmax: 99,
        zcol: 138
      }, {
        zmax: 84,
        zcol: 141
      }, {
        zmax: 69,
        zcol: 144
      }, {
        zmax: 54,
        zcol: 147
      }, {
        zmax: 39,
        zcol: 150
      }, {
        zmax: 24,
        zcol: 153
      }, {
        zmax: 9,
        zcol: 156
      }, {
        zmax: 111,
        zcol: 162
      }, {
        zmax: 96,
        zcol: 165
      }, {
        zmax: 81,
        zcol: 168
      }
    ];
  }

  SquareDotHelper.prototype.get_dots = function(xx, yy) {
    return {
      b: [1, 16],
      r: [2, 17],
      g: [3, 16]
    };
  };

  SquareDotHelper.prototype.get_dot_column = function(color, xx, yy) {
    return 1;
  };

  return SquareDotHelper;

})();

convert = function(img) {
  var b, big, bigctx, bigimgdata, g, grid, ht, i, idata, imgdata, l, m, n, octx, orig, r, wd;
  orig = document.createElement("canvas");
  octx = orig.getContext('2d');
  octx.drawImage(img, 0, 0);
  imgdata = octx.getImageData(0, 0, 50, 50);
  ht = imgdata.height;
  wd = imgdata.width;
  idata = imgdata.data;
  big = document.getElementById('big');
  bigctx = big.getContext('2d');
  bigimgdata = bigctx.createImageData(600, 600);
  grid = bigimgdata.data;
  for (n = i = 0; i <= 49; n = ++i) {
    for (m = l = 0; l <= 49; m = ++l) {
      r = idata[200 * n + 4 * m];
      g = idata[200 * n + 4 * m + 1];
      b = idata[200 * n + 4 * m + 2];
      insert(grid, m, n, r, g, b);
    }
  }
  return bigimgdata;
};

insert = function(gr, mm, nn, rr, gg, bb) {
  var bbb, cc, dots, ggg, i, j, j2, j3, k, results, rgb, rrr, zz;
  dots = [[6, 0, 6], [6, 0, 6], [6, 0, 6], [6, 0, 6], [6, 0, 6], [5, 2, 5], [4, 4, 4], [3, 6, 3], [3, 6, 3], [2, 8, 2], [1, 10, 1], [0, 12, 0]];
  rrr = [rr, 0, 0, 255];
  ggg = [0, gg, 0, 255];
  bbb = [0, 0, bb, 255];
  rgb = [rrr, bbb, ggg];
  zz = 28800 * nn + 48 * mm;
  results = [];
  for (k = i = 0; i <= 11; k = ++i) {
    j2 = 0;
    j3 = 0;
    results.push((function() {
      var l, o, ref, ref1, results1;
      results1 = [];
      for (cc = l = 0; l <= 2; cc = ++l) {
        if (dots[k][cc] > 0) {
          for (j = o = ref = j2, ref1 = j2 + dots[k][cc] - 1; ref <= ref1 ? o <= ref1 : o >= ref1; j = ref <= ref1 ? ++o : --o) {
            putpx(gr, rgb[cc], zz, k, j);
            j3 = j;
          }
          results1.push(j2 = j3 + 1);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    })());
  }
  return results;
};

putpx = function(gggg, rgba, zzzz, kkkk, jjjj) {
  var i, ii, ix, results;
  ix = zzzz + 2400 * kkkk + 4 * jjjj;
  results = [];
  for (ii = i = 0; i <= 3; ii = ++i) {
    results.push(gggg[ix + ii] = rgba[ii]);
  }
  return results;
};

display = function(pxdata) {
  var big, bigctx;
  big = document.getElementById('big');
  bigctx = big.getContext('2d');
  return bigctx.putImageData(pxdata, 0, 0);
};
